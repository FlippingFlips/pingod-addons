<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exporting / Publishing on PinGod AddOns</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/</link><description>Recent content in Exporting / Publishing on PinGod AddOns</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Dec 2022 15:26:15 +0000</lastBuildDate><atom:link href="https://FlippingFlips.github.io/pingod-addons/exporting/index.xml" rel="self" type="application/rss+xml"/><item><title>Exporting</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/exports/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/exports/</guid><description>Also See BasicGame - Simulator Export
Exporting Game Command line Use the bat files export for steps. See Godot Export You only need to build the full export once. The executable will always be the same size, but the pack file will be different. Pack executable size Shrink the executable 40 &amp;gt; 10mb with the _build_upx_shrink_executable.bat in the Build folder.
You will need UPX Ultimate Packer for eXecutables</description></item><item><title>Export Settings - Godot</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings/</guid><description>The BasicGame project below shows that the first project is Windows Desktop Runnable and is exporting to ..Build/PinGod.BasicGame.exe
This window can be found in Godot Project &amp;gt; Export.
Export option &amp;ldquo;embed pck&amp;rdquo; does not work on 32-bit x86 GodotIssues
- Feb 2020
&amp;nbsp;Godot Naming The names here have to be consistent which each other. The exe and the pack.
The BasicGame project for Windows Desktop Pack shows that it&amp;rsquo;s exporting to .</description></item><item><title>Export - export_presets.cfg</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings-export-presets.cfg/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings-export-presets.cfg/</guid><description>The file for the previous Godot Export Settings.
Icons, names, exported saves.
Export Presets Create export presets by duplicating a section, changing the preset number.
Add or change the pack names by hand here, export_paths, folders to exclude or just include
The following example is from the BasicGamePck where we are just creating with all resources apart from the audio folder.
[preset.0] name=&amp;quot;GfxPack&amp;quot; platform=&amp;quot;Windows Desktop&amp;quot; runnable=false custom_features=&amp;quot;&amp;quot; export_filter=&amp;quot;all_resources&amp;quot; include_filter=&amp;quot;&amp;quot; exclude_filter=&amp;quot;assets/audio/*&amp;quot; export_path=&amp;quot;.</description></item><item><title>Export Windows Icons</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-windows-icon/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-windows-icon/</guid><description>If you need to change the icon
Make icon with all size in one file Download RCEdit (Github) and add the path in Godots Editor Settings\RCedit Change icon in the Godots Project Settings/Application/Config See https://docs.godotengine.org/en/3.2/getting_started/workflow/export/changing_application_icon_for_windows.html</description></item><item><title>C# Pcks Are Large...</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/csharp-large-exports/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/csharp-large-exports/</guid><description>This doesn&amp;rsquo;t apply if you decide to have a single executable and pck, so you can skip this
Note: This could have changed in Godot 4, untested
When a project uses mono C# it includes mono assembilies which are around 29mb.
If you try to export the assets only from this project, then you will always have the c# files.
One workaround method is to use the BasicGamePck/project.</description></item><item><title>Link assets into separate assets project</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/link-separate-assets-project/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/link-separate-assets-project/</guid><description>We can reuse the assets and .import directories from BasicGameGodot into the BasicGamePck project.
Use the BasicGamePck project just for exporting assets, scenes, no C# scripts.
Link assets Remove the assets directory if there is one in BasicGamePck
This can be done with _link_assets.bat helper bat file.
Symbolic link the BasicGameGodot\assets directory into the BasicGamePck directory.
Symbolic link the BasicGameGodot\.import directory into the BasicGamePck directory.</description></item></channel></rss>