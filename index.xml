<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on PinGod AddOns</title><link>https://FlippingFlips.github.io/pingod-addons/</link><description>Recent content in Home on PinGod AddOns</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Oct 2022 15:26:15 +0000</lastBuildDate><atom:link href="https://FlippingFlips.github.io/pingod-addons/index.xml" rel="self" type="application/rss+xml"/><item><title>PinGodGame.tscn - Scene</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.tscn/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.tscn/</guid><description>view full image
This scene is autoloaded with the game with all of its child scenes.
Selecting the scene will display the exports options in the scene inspector, see the highlighted right panel in the image.
These godot script exports are created in the PinGodGame.cs script as [Export] properties and the values set here will be saved into the parent scene file, in this case PinGodGame.tscn
Here we have enabled recording and playback file is set, saved to the scene.</description></item><item><title>ScoreMode - Scene</title><link>https://FlippingFlips.github.io/pingod-addons/modes/score-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/modes/score-mode/</guid><description>Basic Score Mode for multi players. Game/Modes/ScoreMode
Exports (ScoreMode.cs) _single_player_p1_visible = false . Show Player ones ScoreP1 label if set to true. Normally in a pinball the scorep1 would not display with main score unless multi-player _show_main_score_multiplayer = true Select NodePaths for the following export properties. A NodePath here should be a label that is added to your layout. If you have 8 players then create 8 labels and add them to the array in godot editor.</description></item><item><title>Adding Switches - PinGodGame.tscn</title><link>https://FlippingFlips.github.io/pingod-addons/machine/adding-switches/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/adding-switches/</guid><description>The following are the default switches in the BasicGameGodot\PinGodGame.tscn file.
When created in the Godot interface, they are saved in this scene file.
You can add your switches here.
_switches = { &amp;quot;coin&amp;quot;: 2, &amp;quot;down&amp;quot;: 5, &amp;quot;enter&amp;quot;: 7, &amp;quot;exit&amp;quot;: 4, &amp;quot;flipper_l&amp;quot;: 11, &amp;quot;flipper_r&amp;quot;: 9, &amp;quot;inlane_l&amp;quot;: 22, &amp;quot;inlane_r&amp;quot;: 23, &amp;quot;mball_saucer&amp;quot;: 27, &amp;quot;outlane_l&amp;quot;: 21, &amp;quot;outlane_r&amp;quot;: 24, &amp;quot;plunger_lane&amp;quot;: 20, &amp;quot;slam_tilt&amp;quot;: 16, &amp;quot;sling_l&amp;quot;: 25, &amp;quot;sling_r&amp;quot;: 26, &amp;quot;start&amp;quot;: 19, &amp;quot;tilt&amp;quot;: 17, &amp;quot;trough_1&amp;quot;: 81, &amp;quot;trough_2&amp;quot;: 82, &amp;quot;trough_3&amp;quot;: 83, &amp;quot;trough_4&amp;quot;: 84, &amp;quot;up&amp;quot;: 6 } It can be faster than the Godot inspector and adding, especially when your switch collection builds up.</description></item><item><title>Bonus</title><link>https://FlippingFlips.github.io/pingod-addons/modes/bonus-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/modes/bonus-mode/</guid><description>Bonus scene used in BasicGame Game.tscn Modes.
StartBonusDisplay is used from the Game.OnBallEnded if the game isn&amp;rsquo;t tilted. So you can override this with your own.
Scene Tree breadown backgroundColor pingod-logo = sprite Label Timer = 1 second
Exports Default Text Display For Seconds Overrides _EnterTree sets Timer and Label If no _defaultText is available it uses translated BONUS_EOB _Ready Finds Trough scene Gets Timer and BlinkingLabel from scene tree _Input Watches actions for tilt, slam_tilt Both tilting actions disable flippers and ball saves.</description></item><item><title>Godot - Installation</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/installation/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/installation/</guid><description>Download Godot editor Download the editor at https://godotengine.org/ Godot is portable (no installation required) (Version 3.4 C# MONO) It&amp;rsquo;s up to you where you extract the files to but for simplicity sake C:\Godot\ You should rename the Godot executable to godot.exe. The shortcuts will use this and it&amp;rsquo;s easy to remember.
After you&amp;rsquo;ve added to environment then you can just run godot from the environment.
Dotnet SDK If you already have a dotnet sdk then you can skip this step.</description></item><item><title>MachineConfig (Items)</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/items/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/items/</guid><description>In the game/PinGodGame.tscn scenes inspector in Godot editor you can edit the machines Coils, Switches, Lamps, Leds.
This can be accessed from the MachineConfig scene by selecting it.
When the game is loaded these items will be added to the machine.
When adding from the UI (green box) select String and Int for the value.
It&amp;rsquo;s quicker to edit this scene file in a text editor and add your items directly in there with the name and number.</description></item><item><title>Main Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/mainscene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/mainscene/</guid><description>This scene is the first to be loaded as a base display set in the projects settings and the scene is never removed from the game, but can add / remove modes like removing the Attract then adding a Game scene.
The first scene can also be found in the project.godot file. run/main_scene=&amp;quot;res://game/MainScene.tscn&amp;quot;
The PinGodAddOns test project loads a Node2D scene instead run/main_scene=&amp;quot;res://Node2D.tscn and doesn&amp;rsquo;t use a base script.
BasicGame - MainScene.</description></item><item><title>Score Entry</title><link>https://FlippingFlips.github.io/pingod-addons/modes/score-entry-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/modes/score-entry-mode/</guid><description>Basic Score mode with charachter selection for players at end of game
Scene Tree breadown ColorRect = Black background color SelectedChar Label = HI_SCORE_ENTRY CenterContainer = Shows selected char center screen ColorRect2 = used as red marker under a letter Exports (ScoreEntry.cs) _includeZeroToNine _nameMaxLength _playerMessage _selectCharMargin = space when changing between chars with flippers _selectedChar Overrides _Ready Sets IsPlayerEnteringScore to true quits the scene if no players or MoveNextPlayer</description></item><item><title>Tilt Mode Scene</title><link>https://FlippingFlips.github.io/pingod-addons/modes/tilt-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/modes/tilt-mode/</guid><description>Base Tilt scene to act on any machine tilting actions and displaying
Scene Tree breadown background CenterContainer &amp;gt; BlinkingLabel = Shows the tilt messages Timer = 2 second One Shot timer
Exports Num Tilt Warnings = Warning before titlt , default = 2
Overrides _Ready Finds Trough scene Gets Timer and BlinkingLabel from scene tree _Input Watches actions for tilt, slam_tilt Both tilting actions disable flippers and ball saves.</description></item><item><title>Adding Actions - Project Settings</title><link>https://FlippingFlips.github.io/pingod-addons/machine/adding-godot-actions/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/adding-godot-actions/</guid><description>Godot Actions - Window inputs Godot uses Actions and we can use the input map to map switches / actions to them.
In the projects Input Map add switches to keys like the example below.
sw20-27 are unassigned, but sw19 is set to 1, which is the default start button.
This start button action 19 (sw19) is checked states in the PinGodGame.cs._Input
This switch is in the GameWindowSwitches collection which is set in the PinGodGame.</description></item><item><title>Godot - Environment Configuration</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/configuration/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/configuration/</guid><description>Set Environment path to Godot How to add to environment (Windows) After any one of these steps you choose is completed then you can load Godot from anywhere using godot.
Windows UI - (Option 1) Push windows key and type path, this will filter to Edit the System Variables Push enter to open the System Properties window, from here select Environment Variables In the Environment Variables - System Variables (bottom window pane) find variable named Path and open this Add in the godot path in this section, OK out of the windows</description></item><item><title>Ball Trough (Scene)</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/trough/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/trough/</guid><description>The Trough.tscn handles the ball trough, ball saving, trough switches, early save switches, shooter lane switch.
Included in the examples PinGodGame.tscn tree.
Most cases you will leave the default settings here, but you can add more switches from this.
Trough / Ball Save Options Trough switche names Ball save seconds Ball save lamp name Ball save multiball seconds Early Ball Save switches Number of Balls to Save Trough Solenoid(coil) Plunger lane switch name Set what to do on ball started Ball search options Enabled Ball Search coils to pulse (usually saucers, scoops not the trough) Search stop switches = Switches that stop the search Search wait time = Time to wait before pulsing coils Trough Class Reference</description></item><item><title>BasicGame - Git Clone</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-git/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-git/</guid><description>Git Setup Use Git to pull the repositories from Github, you don&amp;rsquo;t need a Github account just the software to do this.
Git For Windows - Download Once the installer has started, follow the instructions as provided in the Git Setup wizard screen until the installation is complete. Open the windows command prompt (or Git Bash). Type git version to verify Git was installed.
(Option 1) Clone Create a directory on machine where you are developing named pingod, this could be anything but we need a directory to clone into.</description></item><item><title>BasicGame - Linking addons</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-addons/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-addons/</guid><description>To run the BasicGameGodot project you will need the addons directory linked or copied.
These addons contain base files and pinball framework that a game will use.
Link the PinGod.VP.AddOns You can copy the addons directory to your project (BasicGameGodot in this example), but it&amp;rsquo;s better to use a symbolic link to the addons so we are not duplicating files and you can keep the same addons across projects.</description></item><item><title>BasicGame - Project.Godot</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-project/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-project/</guid><description>&amp;nbsp;Tip Use Alt+D in the project directory, type godot -e then enter to load project
&amp;nbsp;Tip You can use the .bat files in the projects root directory to load a project with . _godot_editor.bat
file what it does _link_addons.bat Links the pingod-addons repository addons directory into BasicGameGodot</description></item><item><title>AudioManager</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/audiomanager/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/audiomanager/</guid><description>AudioManager Class Reference
Add global music, sfx, voice sounds.
See AudioManager</description></item><item><title>BasicGame - Godot Project Loaded Run Game</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-godot/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-godot/</guid><description>Build The MainScene should be visible and you can build the project (top right button).
If build success, you can re-enable the plugin if you need to, but it isn&amp;rsquo;t needed to run the game for now.
Play Hit F5 to run the game. You can use F2 on the window to show border.
Output window Quit ESC to exit the window</description></item><item><title>BasicGame - Window Settings</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-window/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-window/</guid><description>Window controls key action F1 Settings Menu F2 Toggle Window Border F8 Quit? Settings Saved to users app_data directory. See Game Save Data
Audio Display Fullscreen FPS Game Some basic game settings PinGod Read/Write states can be disabled when not running with a simulator.</description></item><item><title>Logging Games</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/logging/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/logging/</guid><description>Game logging Class Reference
Log location In the appdata directory under the game name, logs .log are created. Use the open_app_data.bat to open directory to open the data directory.
The image above has the users game directory open with Sublime Text.
SublimeText - Game Data Folder The steps to add this directory and save project:
Find the games appdata folder with bat file _godot_appdata_dir.bat Copy the path and use Open Folder in Sublime and open the user path Save this as a project in sublime then reopen it later for a quicker way to view logs, look at your settings etc for this game.</description></item><item><title>Overlays (Developing)</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/devoverlays/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/devoverlays/</guid><description>Scenes to overlay on screen like switches and light states
Lamp Overlay Enabled This enables the LampMatrix in the DevOverlays. Options are available on the LampMatrix to change coloumns and count. Customize in your own game if need more advanced.
Switch Overlay Enabled This enables the SwitchOverlay in the DevOverlays. Options are available on the SwitchOverlay to change coloumns.
Switches can be clicked on screen.</description></item><item><title>User Game setting / data</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/game-save-data/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/game-save-data/</guid><description>In the appdata directory under the game name. Use the open_app_data.bat to open directory to open the data directory.
settings.save and gamedata.save Settings.save is json text, readable and editable.
This stores
display settings game settings audio settings memory map options Recordings</description></item><item><title>BasicGame - Game</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game/</guid><description>Game Window Switches Switches need to be added to _gameWindowSwitches in PinGodGame.tscn.
Keys action 5 Credits Q,W,E,R Trough Switches 1-4 1 Start Game T Plunger Lane Y inlane_l Simulating with keypress actions Add credits (5), hold all the trough switches down (QWER) then push start (1).
Add some points with Y = switch 22 inlane_l</description></item><item><title>BasicGame - Visual Pinball</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp/</guid><description>Now that the game is building and running it can be launched with Visual Pinball.
Table can be run from any location in Visual Pinball.
The controller will load the game when the vp player is launched.
&amp;nbsp;Tip Use the _vp_edit.bat or _vp_play.bat to open the table easier
Provided you have the controller setup and have built the godot project this will play.</description></item><item><title>Using Switches C#</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingswitches/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingswitches/</guid><description>Using in game scene c# scripts Connect to a SwitchCommand. Only needs to be done once in EnterTree
//Godot Enter Tree Override. Get pingod and connect to a SwitchCommand signal on it public override void _EnterTree() { pinGod = GetNode(&amp;quot;/root/PinGodGame&amp;quot;) as PinGodGame; pinGod.Connect(nameof(SwitchCommand), this, nameof(SwitchCommandHandler)); } Create handler.
//do stuff on switches. this example just acts when switch is on private void SwitchCommandHandler(string swName, byte index, byte value) { if (!</description></item><item><title>BasicGame - Visual Pinball Script</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp-script/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp-script/</guid><description>BasicGame-PinGod.vbs A script with the same name is included with the table. This will be used with the visual pinball script editor.
This can make it easier to edit outside of table, keep track of changes etc. At the top of this image it shows MODIFYING EXTERNAL.
PinGod.VP.Controller The first section marked in red is the PinGod.VP.Controller initialization.
Game Project Location When debugging, if the games Godot project is relative to the table (the same as this repo), then you won&amp;rsquo;t have to adjust the script for the GameDirectory.</description></item><item><title>Assets - Audio Manager</title><link>https://FlippingFlips.github.io/pingod-addons/game-assets/audiomanager/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/game-assets/audiomanager/</guid><description>Helper class for audio.
note: if you want the finished signal on audio to work when the file is an ogg, the loop must be unchecked then reimported from the import tab
SfxAssets VoiceAssets MusicAssets _EnterTree Initializes the AudioStreamPlayers. Loads sound pack resources and adds any assets found into the provided dictionaries. Will try and load a pingod.snd.pck asset file, tries res://pingod.snd.pck first, then the working directory Methods PinGodGame has wrapped some of the common methods so you can use a PinGodGame reference to do audio controls, playing audio, music, voices.</description></item><item><title>Assets - Video</title><link>https://FlippingFlips.github.io/pingod-addons/game-assets/video/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/game-assets/video/</guid><description>Notes and reminders on some assets and modes.
Video format .Webm is buggy windows? and have had better results with .ogv.
FFMPEG: Converting video examples Using FFMPEG when converting from mp4 this file will be twice the size of the mp4 (6)
ffmpeg -i input.mp4 -c:v libtheora -qscale:v 6 -c:a libvorbis -qscale:a 6 outputname.ogv
Take 10 seconds of video starting at 12 seconds * This lower quality (3) will produce about the same size as the mp4*</description></item><item><title>Attract Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/attractscene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/attractscene/</guid><description>Attract Class Reference Class Reference</description></item><item><title>BallStackPinball (Timer)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/ballstackpinball/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/ballstackpinball/</guid><description>Basic way to use a Timer as a Saucer or Kicker, the scene using this control should connect to the switch signals sent from them. See BasicGame
Tool: BallStackPinball derives from a Timer and can be used in scenes and adding them from filtering in the Godot editor.
Exports Coil = coil sname to pulse Switch = switch name that activates One Shot = true Autostart = false
Godot - Overrides BALL_SAVE_SCENE = &amp;ldquo;res://addons/PinGodGame/Modes/ballsave/BallSave.</description></item><item><title>BaseMode (BasicGame)</title><link>https://FlippingFlips.github.io/pingod-addons/modes/base-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/modes/base-mode/</guid><description>This BaseMode scene is loaded in the Game.tscn Modes scene used in the BasicGame project. A basic mode which has a saucer (kicker) and starts multiball when active.
BaseMode.tscn Exports BALL_SAVE_SCENE = &amp;ldquo;res://addons/PinGodGame/Modes/ballsave/BallSave.tscn&amp;rdquo;;
BallStackPinball In Node / Signals pane we have connected signals to the BallStackPinball scene
Here&amp;rsquo;s what it looks like connected inside a .tscn. The methods are inside the BaseMode.cs script.
[connection signal=&amp;quot;SwitchActive&amp;quot; from=&amp;quot;BallStackPinball&amp;quot; to=&amp;quot;.&amp;quot; method=&amp;quot;OnBallStackPinball_SwitchActive&amp;quot;] [connection signal=&amp;quot;timeout&amp;quot; from=&amp;quot;BallStackPinball&amp;quot; to=&amp;quot;.</description></item><item><title>BasicGame - Exporting</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-exporting/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-exporting/</guid><description>You can export the game to be used without the Godot editor. The Build folder will be used to export to.
Godot Export file does? _godot_export_full.bat Exports Windows Desktop which is executable and main pack _godot_export_pck.bat Exports Windows Desktop Pack which updates the main pack. The executable will be the same for all games as it basically is Godot You only need to run _godot_export_full.</description></item><item><title>BlinkingLabel (Label)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/blinkinglabel/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/blinkinglabel/</guid><description>A label that blinks on a timer with optional methods for controlling the blink</description></item><item><title>Exporting</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/exports/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/exports/</guid><description>Also See BasicGame - Simulator Export
Exporting Game Command line Use the bat files export for steps. See Godot Export You only need to build the full export once. The executable will always be the same size, but the pack file will be different. Pack executable size Shrink the executable 40 &amp;gt; 10mb with the _build_upx_shrink_executable.bat in the Build folder.
You will need UPX Ultimate Packer for eXecutables</description></item><item><title>Game Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/gamescene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/gamescene/</guid><description>This scene is loaded from the attract mode. (Add to favorites for quick access)
Add scenes to the modes CanvasLayer to use in game or add to from script
Default Modes (CanvasLayer) ScoreMode [[ScoreMode.tscn ScoreMode.cs|06a.-ScoreMode]]
BaseMode Set the Ball Save Scene [[BaseMode.tscn BaseMode.cs|06b.-BaseMode]]
Bonus Set the default text and display time [[Bonus.tscn Bonus.cs|06c.-Bonus]]
Tilt Set number of tilt warnings [[Tilt.tscn Tilt.cs|06d.-Tilt]]
ScoreEntry Scene to show when player is entering a score [[ScoreEntry.</description></item><item><title>Language files</title><link>https://FlippingFlips.github.io/pingod-addons/languages/attractscene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/languages/attractscene/</guid><description>Add translations for the game. There are also defaults to cover most standard pinball messages in addons/PinGodGame/Localization
The default example covers English and French in pindog_default_lang.csv.
Files YourGame/local BasicGameLang.csv
keys,en MY_MSG,Add key values for lanuguages Usage Godot Scripts These can be used in Godot script by using the translation method Tr(&amp;quot;EXTRA_BALL&amp;quot;)
_defaultText = Tr(&amp;quot;BONUS_EOB&amp;quot;);
Replacing placeholders CSV
HI_SCORE_ENTRY,PLAYER %d\r\nENTER NAME,JOUEUR %d\r\nENTRER LE NOM
SCRIPT
playerMessageLabel.Text = Tr(&amp;quot;HI_SCORE_ENTRY&amp;quot;).Replace(&amp;quot;%d&amp;quot;, (CurrentPlayer + 1).ToString());</description></item><item><title>PinballLanesNode (PinGodGameMode:Node)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/pinballlanesnode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/pinballlanesnode/</guid><description>Set the exports in the scene from Godot or tscn. and other options.</description></item><item><title>PinballTargetsBank (Node)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/pinballtargetsbank/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/pinballtargetsbank/</guid><description>Handles a bank of targets, the light states and watches for completion</description></item><item><title>Using Switches (Controller)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingswitchescontroller/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingswitchescontroller/</guid><description>Auto Switch handlers (No scripting) In the BasicGame, Visual Pinball table switches are added to a simulator collection named AllSwitches.
Add the switch number to the TimerInterval box in the Misc settings to 20 and add the switch to the AllSwitches collection.
All VP table objects should be covered, so you wouldn&amp;rsquo;t have to remember to use Spin instead of Hit for a spinner in the collection. (Scripting) Visual Pinball - Switch On / Off Sub sw_plunger_lane_hit() : Controller.</description></item><item><title>VideoPlayerPinball (VideoPlayer)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/videoplayerpinball/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/videoplayerpinball/</guid><description>VideoPlayerPinball (AddOn) This helper node for video has options to set looping and other in the inspector when added to the tree.
Tool: This can be added with Create New Node and searching in godot editor for control VideoPlayerPinball
Adding VideoPlayerPinball to Attract Mode 1. Using a duplicated BasicGame as starter project Open project with Godot Find the Attract.tscn in the addons res://addons/Modes/attract, right click and duplicate and give it a name, CustomAttract.</description></item><item><title>BasicGame - Adding Resources and Resource packs</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-resources/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-resources/</guid><description>In the PinGodGame.tscn is a ResourcePreloader node.
When this is loaded with the scene it looks for the packs you have set in the Resource Packs.
Resource Packs By default the collection includes the export packs in the previous section. pingod.gfx.pck and pingod.snd.pck
You can add with the scene inspector or directly in the tscn file it saves to.
Resources (Key, Path) Add resources that will be pre loaded in this dictionary by key , path.</description></item><item><title>BasicGame - Assets and Pcks</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-assets-and-packs/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-assets-and-packs/</guid><description>The BasicGamePck directory is an extra project for exporting asset packs. Using this project means we can keep assets from the game separated.
You may also want to make a base asset pack to copy and load across multiple games.
You are not limited to media, it could be a scene with assets included.
There is an empty folder structure in game which you can add your assets into, then you can run the _build bat files to export a .</description></item><item><title>BasicGame - Create first asset scene</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-create-asset-scene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-create-asset-scene/</guid><description>In Godot right click assets directory and add a new folder named scenes. Right click the new scenes folder and add new scene and name it test_scene. Select the type of node to be a Sprite by using Other Node for this scenes Root Node. Save the scene Ctrl+S after it opens and the file will be created test_scene.tscn
Find an image on disk and drag it into the Godot path.</description></item><item><title>PinGodGame.cs - Script</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.cs/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.cs/</guid><description>This script is autoloaded from the scene when the display window is launched and has many methods.
Modes and other scenes can get access to this from the root tree. GetNode&amp;lt;PinGodGame&amp;gt;(&amp;quot;/root/PinGodGame&amp;quot;).
Exports Scene inspector uses [export]s that are defined in game\PinGodGame.cs. You can add your own to your game from inheriting from the PinGodGame
Godot - Overrides _EnterTree = Gets user cmd line args, loads data and settings, creates trough, sets up ball search and audio manager</description></item><item><title>Export Settings - Godot</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings/</guid><description>The BasicGame project below shows that the first project is Windows Desktop Runnable and is exporting to ..Build/PinGod.BasicGame.exe
This window can be found in Godot Project &amp;gt; Export.
Export option &amp;ldquo;embed pck&amp;rdquo; does not work on 32-bit x86 GodotIssues
- Feb 2020
&amp;nbsp;Godot Naming The names here have to be consistent which each other. The exe and the pack.
The BasicGame project for Windows Desktop Pack shows that it&amp;rsquo;s exporting to .</description></item><item><title>Export - export_presets.cfg</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings-export-presets.cfg/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings-export-presets.cfg/</guid><description>The file for the previous Godot Export Settings.
Icons, names, exported saves.
Export Presets Create export presets by duplicating a section, changing the preset number.
Add or change the pack names by hand here, export_paths, folders to exclude or just include
The following example is from the BasicGamePck where we are just creating with all resources apart from the audio folder.
[preset.0] name=&amp;quot;GfxPack&amp;quot; platform=&amp;quot;Windows Desktop&amp;quot; runnable=false custom_features=&amp;quot;&amp;quot; export_filter=&amp;quot;all_resources&amp;quot; include_filter=&amp;quot;&amp;quot; exclude_filter=&amp;quot;assets/audio/*&amp;quot; export_path=&amp;quot;.</description></item><item><title>Export Windows Icons</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-windows-icon/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-windows-icon/</guid><description>If you need to change the icon
Make icon with all size in one file Download RCEdit (Github) and add the path in Godots Editor Settings\RCedit Change icon in the Godots Project Settings/Application/Config See https://docs.godotengine.org/en/3.2/getting_started/workflow/export/changing_application_icon_for_windows.html</description></item><item><title>C# Pcks Are Large...</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/csharp-large-exports/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/csharp-large-exports/</guid><description>This doesn&amp;rsquo;t apply if you decide to have a single executable and pck, so you can skip this
When a project uses mono C# it includes mono assembilies which are around 29mb.
If you try to export the assets only from this project, then you will always have the c# files.
One workaround method is to use the BasicGamePck/project.godot project. This project is empty, no scenes or C# scripts.</description></item><item><title>Link assets into separate assets project</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/link-separate-assets-project/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/link-separate-assets-project/</guid><description>We can reuse the assets and .import directories from BasicGameGodot into the BasicGamePck project.
Use the BasicGamePck project just for exporting assets, scenes, no C# scripts.
Link assets Remove the assets directory if there is one in BasicGamePck
This can be done with _link_assets.bat helper bat file.
Symbolic link the BasicGameGodot\assets directory into the BasicGamePck directory.
Symbolic link the BasicGameGodot\.import directory into the BasicGamePck directory.</description></item><item><title>Using Coils (C#)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingcoils/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingcoils/</guid><description>Coils can be On, Off or Pulsed. Get a reference to pinGod and use methods with name.
pinGod.SolenoidPulse(&amp;quot;trough&amp;quot;, 225); pinGod.SolenoidOn(&amp;quot;trough&amp;quot;, 1); pinGod.SolenoidOn(&amp;quot;trough&amp;quot;, 0); pinGod.SolenoidPulse(&amp;quot;auto_plunger&amp;quot;)// Pulse the auto plunger pinGod.SolenoidOn(&amp;quot;flippers&amp;quot;, 1) // enable the flippers</description></item><item><title>Using Coils (Controller)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingcoilscontroller/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingcoilscontroller/</guid><description>Visual Pinball SolCallbacks When Visual Pinball detects changed coils the callbacks are invoked by coil number.
The script example to handle coil 35 would be SolCallback(35) = &amp;quot;Lampshow2&amp;quot;. This will invoke the LampShow2 sub routine (if you have one)
SolCallback(0) = &amp;quot;Alive&amp;quot; ' If at some point Godot closes then this lets VP know about it SolCallback(1) = &amp;quot;bsTrough.solOut&amp;quot; ' The trough which makes the ball pop out.... SolCallback(2) = &amp;quot;FlippersEnabled&amp;quot; ' Enable and disable flippers, when ball drains, tilt etc Some standard callbacks for default game</description></item><item><title>BasicGame - Script Editing Setup</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-script-editing/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-script-editing/</guid><description>Script editing / Editing .tscn files outside of Godot editor It&amp;rsquo;s not great to use the Godot editor for editing C# scripts. We prefer to use Visual Studio, but with any text editor you can build changes made in Godot.
Visual Studio Bigger install, full ide, code completion
Visual Studio Code Smaller, quicker to load a project directory, code completion, has a terminal.
Sublime Text Smaller text editing, this is good for using saved directories and viewing the contents of the games app_data and logs.</description></item><item><title>Recording / Playback</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/recordings-playback/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/recordings-playback/</guid><description>Quick guide on how to record and playback a game. Recording a game can speed up your game development for game logic.
They would usually start off by using trough switches adding credits and starting a game, then any events after this to test any recorded sequence.
Recording Recording files are saved in the user://recordings/recordname.record
Example game dir: C:\Users\UserName\AppData\Roaming\Godot\app_userdata\BasicGameGodot\recordings
&amp;nbsp;Note You can get to the app_data directory for the game using app_data bat file</description></item><item><title>About PinGod</title><link>https://FlippingFlips.github.io/pingod-addons/about/</link><pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/about/</guid><description>Pinball game framework</description></item></channel></rss>