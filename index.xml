<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on PinGod AddOns</title><link>https://FlippingFlips.github.io/pingod-addons/</link><description>Recent content in Home on PinGod AddOns</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Oct 2022 15:26:15 +0000</lastBuildDate><atom:link href="https://FlippingFlips.github.io/pingod-addons/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating custom score mode scene</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/custom-score-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/custom-score-mode/</guid><description>Start with duplicating the ScoreMode.tscn file from the addons.
Filter the files in godot for score and duplicate it, rename it to MygameScoreMode or anything like that. You want to move the file after it&amp;rsquo;s created to somewhere in your root like res://scenes.
The following image is the steps above and loaded.
If you select the ScoreMode node and look in the inspector these are the options from that script.</description></item><item><title>Tools - Images</title><link>https://FlippingFlips.github.io/pingod-addons/game-assets/tools-image/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/game-assets/tools-image/</guid><description>Image edit Tools Here are some tools we use a lot and have been used when making games for pinball.
A quick way to install anything is through chocolatey.
Inkscape (scalable vector) choco install inkscape
ðŸ”— Inkscape (chocolatey)
ImageMagick (converting webp) choco install imagemagick.app
ðŸ”— ImageMagick (chocolatey)
Gimp (Image editing) choco install gimp
ðŸ”— Gimp (chocolatey)</description></item><item><title>Main Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/mainscene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/mainscene/</guid><description>This scene is the first to be loaded as a base display set in the projects settings and the scene is never removed from the game, but can add / remove modes like removing the Attract then adding a Game scene.
The first run scene can also be found in the project.godot file. res://MainScene.tscn&amp;quot;
Scene inspector - Exports Property Description Game Scene Path The path to the Game scene the main scene will use when started from attract Service Menu Scene Path The path to the service menu (default) Modes When resources are fully loaded an attract mode is added to the Modes, when a game is started a game is added here in place of the attract.</description></item><item><title>Attract Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/attractscene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/attractscene/</guid><description>Attract Class Reference Class Reference</description></item><item><title>Game Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/gamescene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/gamescene/</guid><description>This scene is loaded from the attract mode. (Add to favorites for quick access)
Add scenes to the modes CanvasLayer to use in game or add to from script
Default Modes (CanvasLayer) ScoreMode [[ScoreMode.tscn ScoreMode.cs|06a.-ScoreMode]]
BaseMode Set the Ball Save Scene [[BaseMode.tscn BaseMode.cs|06b.-BaseMode]]
Bonus Set the default text and display time [[Bonus.tscn Bonus.cs|06c.-Bonus]]
Tilt Set number of tilt warnings [[Tilt.tscn Tilt.cs|06d.-Tilt]]
ScoreEntry Scene to show when player is entering a score [[ScoreEntry.</description></item><item><title>Creating custom playfield switch window</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/playfield-switch-window/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/playfield-switch-window/</guid><description>Create Playfield image to use: Open the game in VP and take a screenshot of the editor with the playfield in view. You can do this with Alt + PrtScn. Open Microsoft Paint and paste in you screenshot of the editor. Get there with windows key and typing paint Select the outer playfield and crop it in MsPaint Click resize by pixels, uncheck Maintain aspect ratio and set to 400 x 900 Save this image into your game folder so Godot picks it up and you can assign this to window image.</description></item><item><title>Creating custom Score Entry scene</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/scoreentry/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/scoreentry/</guid><description>Filter Godot files by ScoreEntry Duplicate the ScoreEntry.tscn and move to your res://autoload directory Add the packed scene location, replacing any existing in the res:autoload/Resources.tscn Add the new scene into the Game.tscn so it knows where your version is Edit away without effecting the addons and script. You can take it further than cosmetic from here with a script. Things you can try in the scene:
Setting a theme on the top control ScoreEntry, which will set all in the scene, provided you have made custom theme entries like Label themes.</description></item><item><title>Getting Started</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/getting-started/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/getting-started/</guid><description>We&amp;rsquo;ll use the template project we built for PinGod P-ROC for this guide / overview. examples/pingod-netproc-pdb
We will focus on the P3-ROC / PDB board. We do intend to add the same for the original P-ROC board, it&amp;rsquo;s just untested.
This uses a IFakeProcDevice, but that can be swapped with a single simulated flag when the game is created in the ProcPinGodGame.cs.
You will want more or less the setup from the beginning guide.</description></item><item><title>PinGodGame.tscn - Scene</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.tscn/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.tscn/</guid><description>This scene is autoloaded with the game with all of its child scenes.
Selecting the scene will display the exports options in the scene inspector, see the highlighted right panel in the image.
Scene Tree Top left pane scenes in PinGodGame.tscn
Link Scene Description Details MachineConfig Manage machine items, ball search Details Resources When this is loaded with the scene it looks for the packs you have set in the Resource Packs.</description></item><item><title>ScoreMode - Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/score-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/score-mode/</guid><description>Basic Score Mode for multi players. Game/Modes/ScoreMode
Exports (ScoreMode.cs) _single_player_p1_visible = false . Show Player ones ScoreP1 label if set to true. Normally in a pinball the scorep1 would not display with main score unless multi-player _show_main_score_multiplayer = true Select NodePaths for the following export properties. A NodePath here should be a label that is added to your layout. If you have 8 players then create 8 labels and add them to the array in godot editor.</description></item><item><title>Building / Debug</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/building-running/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/building-running/</guid><description>Building Project You should be able to build the project with dotnet build providing you have linked or added the addons directory.
It can be built inside Godot 4 by running the project editor godot -e.
Running You can run from command line with godot no debug
Debugging Visual Studio is very good here for debugging. Use the Properties/launchSettings.json to adjust launch profiles.
Option Description Godot4 (Debug with Console) Uses the godot_console.</description></item><item><title>Autoloads</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/autoloads/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/autoloads/</guid><description>Autoloads are scenes that we are overriding from the res://autoload directory. These are plugins that can be disabled in the Godot Project Settings. Parts of your game should be able to run without these plugins but in some cases they will need each other to work fully in a game.
Scene Description Adjustments.tscn Not used. Our adjustments come from the database through P-ROC not PinGod AudioManager.</description></item><item><title>BaseMode (BasicGame)</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/base-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/base-mode/</guid><description>This BaseMode scene is loaded in the Game.tscn Modes scene used in the BasicGame project. A basic mode which has a saucer (kicker) and starts multiball when active.
BaseMode.tscn Exports BALL_SAVE_SCENE = &amp;ldquo;res://addons/PinGodGame/Modes/ballsave/BallSave.tscn&amp;rdquo;;
BallStackPinball In Node / Signals pane we have connected signals to the BallStackPinball scene
Here&amp;rsquo;s what it looks like connected inside a .tscn. The methods are inside the BaseMode.cs script.
[connection signal=&amp;quot;SwitchActive&amp;quot; from=&amp;quot;BallStackPinball&amp;quot; to=&amp;quot;.&amp;quot; method=&amp;quot;OnBallStackPinball_SwitchActive&amp;quot;] [connection signal=&amp;quot;timeout&amp;quot; from=&amp;quot;BallStackPinball&amp;quot; to=&amp;quot;.</description></item><item><title>ProcScene - Main Scene</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/procscene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/procscene/</guid><description>This scene is the first scene to load. It is a placeholder with nothing to load inside of it apart from two CanvasLayers, which are placeholders for Modes and an Overlay.
When the game is running, any modes that need to be visible can be added to the Modes CanvasLayer.
The CanvasLayers have a priority, so that covers mode priority in a similar fashion to DMD layers / modes from the original P-ROC.</description></item><item><title>Adding Switches</title><link>https://FlippingFlips.github.io/pingod-addons/machine/adding-switches/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/adding-switches/</guid><description>The following are the default switches in the autoload\Machine.tscn file.
When created in the Godot interface, they are saved in this scene file. You can add your switches here from text editor which is faster.
_switches = { &amp;quot;coin1&amp;quot;: 0, &amp;quot;coin2&amp;quot;: 1, &amp;quot;coin3&amp;quot;: 2, &amp;quot;coin4&amp;quot;: 3, &amp;quot;exit&amp;quot;: 4, &amp;quot;down&amp;quot;: 5, &amp;quot;up&amp;quot;: 6, &amp;quot;enter&amp;quot;: 7, &amp;quot;coinDoor&amp;quot;: 8, &amp;quot;flipperLwL&amp;quot;: 9, &amp;quot;flipperLwR&amp;quot;: 11, &amp;quot;flipperUpL&amp;quot;: 13, &amp;quot;flipperUpR&amp;quot;: 15, &amp;quot;slamTilt&amp;quot;: 16, &amp;quot;tilt&amp;quot;: 17, &amp;quot;ballShooter&amp;quot;: 18, &amp;quot;start&amp;quot;: 19, &amp;quot;trough0&amp;quot;: 21, &amp;quot;trough1&amp;quot;: 22, &amp;quot;trough2&amp;quot;: 23, &amp;quot;trough3&amp;quot;: 24, &amp;quot;plungerLane&amp;quot;: 25, &amp;quot;inlaneL&amp;quot;: 26, &amp;quot;inlaneR&amp;quot;: 27, &amp;quot;outlaneL&amp;quot;: 28, &amp;quot;outlaneR&amp;quot;: 29, &amp;quot;slingL&amp;quot;: 30, &amp;quot;slingR&amp;quot;: 31, &amp;quot;bumper0&amp;quot;: 32, &amp;quot;bumper1&amp;quot;: 33, &amp;quot;bumper2&amp;quot;: 34, &amp;quot;mballSaucer&amp;quot;: 35 }</description></item><item><title>Bonus</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/bonus-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/bonus-mode/</guid><description>Bonus scene used in BasicGame Game.tscn Modes.
StartBonusDisplay is used from the Game.OnBallEnded if the game isn&amp;rsquo;t tilted. So you can override this with your own.
Scene Tree breadown backgroundColor pingod-logo = sprite Label Timer = 1 second
Exports Default Text Display For Seconds Overrides _EnterTree sets Timer and Label If no _defaultText is available it uses translated BONUS_EOB _Ready Finds Trough scene Gets Timer and BlinkingLabel from scene tree _Input Watches actions for tilt, slam_tilt Both tilting actions disable flippers and ball saves.</description></item><item><title>Godot - Installation</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/installation/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/installation/</guid><description>Download Godot 4 editor PinGod will be using Godot4 beta. Beta 14, is current as of writing this document.
Godot4 plays better with C# and uses dotnet 6.0. After doing some testing this is the version we prefer.
Download the beta editor at https://downloads.tuxfamily.org/godotengine/4.0// Godot is portable (no installation required) It&amp;rsquo;s up to you where you extract the files to but for simplicity sake C:\Godot\ You should rename the Godot executable to godot.</description></item><item><title>Mode - PinGodProcMode:IMode</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodprocmode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodprocmode/</guid><description>This is a Base mode using the NetProc P-ROC Mode / IMode and can be found in modes/PinGodProcMode.cs.
These modes have access to the P-ROC game controller and can be used for your game logic and switch handling.
When a mode is created it gets access to the Resources pingod plugin and gets the Modes canvas from the ProcScene.
The default modes node path, string modesRootPath = &amp;quot;/root/ProcScene/Modes&amp;quot;;
About P-ROC Modes The p-roc modes have some methods to override.</description></item><item><title>PinGodGame Projects - Create Template</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/new-project-pingodgame-template/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/new-project-pingodgame-template/</guid><description>Empty Project Steps below to create new empty project
Create new project folder, add empty text file named project.godot Symbolic link the addons to the project so you can reuse it, remove it etc. Symbolic Link If we&amp;rsquo;re in pingod\PinGodDev and pingod\pingod-addons is a directory above the current then we can link the addons
SET cDir=%cd% cd ../pingod-addons/addons SET addDir=%cd% cd %cDir% mklink /D addons &amp;quot;%addDir%&amp;quot; Open project in Godot Open the project in Godot (godot -e) and you&amp;rsquo;ll see the directory which you have linked Playing the game will ask you to define a scene to load Add Scene Add new Node2D Rename the node and save it as MyScene Save in the root directory and not the addons directory The new scene should be at res://MyScene.</description></item><item><title>Score Entry</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/score-entry-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/score-entry-mode/</guid><description>Basic Score mode with charachter selection for players at end of game
Scene Tree breadown ColorRect = Black background color SelectedChar Label = HI_SCORE_ENTRY CenterContainer = Shows selected char center screen ColorRect2 = used as red marker under a letter Exports (ScoreEntry.cs) _includeZeroToNine _nameMaxLength _playerMessage _selectCharMargin = space when changing between chars with flippers _selectedChar Overrides _Ready Sets IsPlayerEnteringScore to true quits the scene if no players or MoveNextPlayer</description></item><item><title>Tilt Mode Scene</title><link>https://FlippingFlips.github.io/pingod-addons/base-scenes/tilt-mode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/base-scenes/tilt-mode/</guid><description>Base Tilt scene to act on any machine tilting actions and displaying
Scene Tree breadown background CenterContainer &amp;gt; BlinkingLabel = Shows the tilt messages Timer = 2 second One Shot timer
Exports Num Tilt Warnings = Warning before titlt , default = 2
Overrides _Ready Finds Trough scene Gets Timer and BlinkingLabel from scene tree _Input Watches actions for tilt, slam_tilt Both tilting actions disable flippers and ball saves.</description></item><item><title>Blank Empty Projects</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/new-project/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/new-project/</guid><description>In the examples directory is a folder named !template. This is bare bones minimum. If on windows just copy and paste this folder in the examples and rename it to your name.
What&amp;rsquo;s in the folder? Properties This contains a launchSettings.json for launching the project inside Visual Studio. These are launch profiles and you can add your own in this file.
_link_addons.bat This file is explained in previous here but it will link the addons folder into the game so you are not duplicating files, just reusing the addons.</description></item><item><title>Database - Sql</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/database-sql/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/database-sql/</guid><description>The nuget package NetProc.Data will provide you with .sql files to seed database data.
This creates a sqlite database and saves everything here from the game, from machine items to game audits and adjustments.
Switches Coils LEDS Lamps Audits Adjustments GamesPlayed BallsPlayed Players Scores You will edit one of the files depending on the machine type, but before you edit, copy the file and create your own into the sql directory.</description></item><item><title>PinGodGame Projects - New From Template</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/create-pingodgame-template/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/create-pingodgame-template/</guid><description>Duplicate Template Copy the pingod-projects-template and paste in same directory, by default windows adds - Copy to the directory Rename the copy to pingod-projects-myproject You will need to link the addons again. Delete addons directory then run the _link_addons.bat project.godot file You can add a project name to the project.godot file before running the project. These are found under [application] in the config section. Yours will be empty.</description></item><item><title>Simulator - Assets</title><link>https://FlippingFlips.github.io/pingod-addons/game-assets/simulator-assets/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/game-assets/simulator-assets/</guid><description>A rundown and overview how we have made the templates and assets for the simulator.
Visual Pinball - Assets Provided with some table examples are assets used to create the graphics for Visual Pinball.
This gives a quick workflow for you if you&amp;rsquo;re new to working with graphics, exporting, importing to the simulator.
Playfield.svg Use this file with Inkscape. It just consists of separate layers which you can hide/unhide to do different exports.</description></item><item><title>Adding Actions - Project Settings</title><link>https://FlippingFlips.github.io/pingod-addons/machine/adding-godot-actions/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/adding-godot-actions/</guid><description>Godot Actions - Window inputs Godot uses Actions and we can use the input map to map switches / actions to them. In the projects Input Map add switches to keys like the example below.
sw20-27 are unassigned, but sw19 is set to 1, which is the default start button.
This start button action 19 (sw19) is checked states in the PinGodGame.cs._Input
You will need to add switches you want to use on the window in the WindowActions.</description></item><item><title>PinGodGame Projects - Add a C# Script</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/create-pingodgame-template-script/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/create-pingodgame-template-script/</guid><description>Create Script for MyScene This template project will not give any errors if you don&amp;rsquo;t use a C# script but if using an existing scene that uses a script then we will need to add a C# project to the directory.
As we&amp;rsquo;ve referenced a C# script from the SwitchOverlay.tscn then we need to make a C# project.
Fortunately that is easy as we just have to make a new script to do this.</description></item><item><title>PinGodGame - Godot 4</title><link>https://FlippingFlips.github.io/pingod-addons/tips-guides/updating-godot4/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tips-guides/updating-godot4/</guid><description>Godot 4 . Download https://downloads.tuxfamily.org/godotengine/4.0/beta10/mono/
latest: https://downloads.tuxfamily.org/godotengine/4.0/ Use the 64bit Godot. Rename to godot4.exe add environment path Apis changes:
Have to name delegates ending with EventHandler classes are all partial OS.GetTicks to Time.GetTicksMsec Vector2 to Vector2i Connect needs to replaced with new Callable(this, nameof(OnBallSearchTimeout)) Event handlers can also be subscribed to with standard C# way += Visual Debugging Need to create a Properties/launchSettings.</description></item><item><title>PinGodGamePROC</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodgame.tscn/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingodgame.tscn/</guid><description>This scene overrides the normal PinGodGame.tscn from autoload/PinGodGame.tscn.
In Godots scene inspector there are some developer options that can be set:
Option Default Description Proc Delay 10 Delays the proc loop, setting 10 here helps with simulation Delete Db On Init off Deletes the database when the game is run. This is useful if you add switches to the .sql import file Simulated on Game is simulated and will use a FakePinProc LogLevel Verbose Log level setting for PinGodGame and NetProc.</description></item><item><title>Godot - Environment Configuration</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/configuration/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/configuration/</guid><description>Set Environment path to Godot How to add to environment (Windows) After any one of these steps you choose is completed then you can load Godot from anywhere using godot.
Windows UI - (Option 1) Push windows key and type path, this will filter to Edit the System Variables Push enter to open the System Properties window, from here select Environment Variables In the Environment Variables - System Variables (bottom window pane) find variable named Path and open this Add in the godot path in this section, OK out of the windows</description></item><item><title>PinGodProc GameController</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingod-procgame-controller/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/pingod-procgame-controller/</guid><description>This is the main GameController for P-ROC which is based from a Database Game Controller in NetProc.
Here you will find the main event methods for a game and get access to the machine items from the .sql
When the game is created a database will be created for the game which holds settings, saves audits. All of this is taken care of but you can add your own audits / adjustments to the .</description></item><item><title>Ball Trough (Scene)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/trough/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/trough/</guid><description>The Trough.tscn handles the ball trough, ball saving, trough switches, early save switches, shooter lane switch.
Included in the examples PinGodGame.tscn tree.
Most cases you will leave the default settings here, but you can add more switches from this.
Trough / Ball Save Options Trough switche names Ball save seconds Ball save lamp name Ball save multiball seconds Early Ball Save switches Number of Balls to Save Trough Solenoid(coil) Plunger lane switch name Set what to do on ball started Ball search options Enabled Ball Search coils to pulse (usually saucers, scoops not the trough) Search stop switches = Switches that stop the search Search wait time = Time to wait before pulsing coils Trough Class Reference</description></item><item><title>Mode - Base Modes</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/proc-basemodes/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/proc-basemodes/</guid><description>Trough This is loaded with the game controller. All you have to do is tag your switches correctly in the .sql machine configuration and it will handle the rest.
Make sure you have trough tags for switches and eject coil. Plunger lane, early save switches if using. These can be found in the example .sql.
Other modes In the proc/PinGodProcGameController.cs script when the game resources have fully loaded and called MachineResourcesReady, then some modes are created.</description></item><item><title>BasicGame - Git Clone</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-git/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-git/</guid><description>Using Git to clone the repositories
(Option 1) Clone Create a directory on machine where you are developing named pingod, this could be anything but we need a directory to clone into.
Browse into the pingod directory just created and use keypress ALT+D then type cmd and enter, to open windows cmd prompt in that directory.
Clone the pingod-addons with git clone https://github.com/FlippingFlips/pingod-addons</description></item><item><title>BasicGame - Linking addons</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-addons/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-setup-addons/</guid><description>To run the pingod-basigame project in the examples folder you will need the addons directory linked or copied.
These addons contain base files and pinball framework that a game will use.
Link the AddOns You can copy the addons directory to your project (pingame-basicgame in this example), but it&amp;rsquo;s better to use a symbolic link to the addons so we are not duplicating files and you can keep the same addons across projects.</description></item><item><title>BasicGame - Project.Godot</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-project/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-project/</guid><description>&amp;nbsp;Tip Use Alt+D in the project directory, type godot -e then enter to load project
&amp;nbsp;Tip You can use the .bat files in the projects root directory to load a project with . _godot_editor.bat
Load projects into Editor by adding --path:
godot -e --path pingod-basicgame/BasicGameGodot
Add on linking file what it does _link_addons.bat Links the pingod-addons the epositories addons directory into the BasicGameGodot project</description></item><item><title>BasicGame - Godot Project Loaded Run Game</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-godot/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-godot/</guid><description>Build The MainScene should be visible and you can build the project (top right button).
If build success, you can re-enable the plugin if you need to, but it isn&amp;rsquo;t needed to run the game for now.
Play Hit F5 to run the game. You can use F2 on the window to show border.
Output window Quit ESC to exit the window</description></item><item><title>BasicGame - Window Settings</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-window/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-window/</guid><description>Window controls key action F1 Settings Menu F2 Toggle Window Border F8 Quit? Settings Saved to users app_data directory. See Game Save Data
Audio Display Fullscreen FPS Game Some basic game settings PinGod Read/Write states can be disabled when not running with a simulator.</description></item><item><title>Logging Games</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/logging/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/logging/</guid><description>In the appdata directory under the game name. %AppData%\Godot\app_userdata\BasicGameGodot\Logs.
Rolling logs, with the godot.log is always being the latest.
Log location In the appdata directory under the game name, logs .log are created. Use the open_app_data.bat to open directory to open the data directory.
The image above has the users game directory open with Sublime Text.
SublimeText - Game Data Folder The steps to add this directory and save project:</description></item><item><title>Mode - AttractMode</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/attractmode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/attractmode/</guid><description>In the modes directory you&amp;rsquo;ll find AttractMode.cs. This is a P-ROC mode script using the base PinGodProcMode because we need visible layers here.
This needs a reference to a scene in res://scenes/AttractMode/AttractProc.tscn.
This scene is set in the Resources.tscn to pre load it so we can just create instances when we need to.
Scene and Script The script gets the top scores from the database and populates the base Attract.</description></item><item><title>User Game setting / data</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/game-save-data/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/game-save-data/</guid><description>In the appdata directory under the game name. %AppData%\Godot\app_userdata\BasicGameGodot\settings.save
You can open this directory with the _godot_appdata_dir.bat file
settings.save and gamedata.save Settings.save is json text, readable and editable.
This stores
display settings game settings audio settings memory map options You don&amp;rsquo;t need to edit these by hand. Any of your added settings will go in this file. Recordings See Recordings / Playback</description></item><item><title>Mode - ScoreDisplayProcMode</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/scoredisplayprocmode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/scoredisplayprocmode/</guid><description>In the modes directory you&amp;rsquo;ll find ScoreDisplayProcMode.cs. This is a P-ROC mode script using the base PinGodProcMode because we need visible layers here.
Uses a reference to a scene in res://scenes/ScoreMode/ScoreModeProc.tscn. This scene is also set in the Resources.tscn. To pre load it so we can just create instances when we need to.
Scene and Script The change here lies within the ScoreModeProc.cs which is based off the existing PinGodGame ScoreMode.</description></item><item><title>BasicGame - Game</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game/</guid><description>Game Window Switches Switches need to be added to _gameWindowSwitches in PinGodGame.tscn.
Keys action 5 Credits Q,W,E,R Trough Switches 1-4 1 Start Game T Plunger Lane Y inlane_l Simulating with keypress actions Add credits (5), hold all the trough switches down (QWER) then push start (1).
Add some points with Y = switch 22 inlane_l</description></item><item><title>BasicGame - Visual Pinball</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp/</guid><description>Now that the game is building and running it can be launched with Visual Pinball.
Table can be run from any location in Visual Pinball.
The controller will load the game when the vp player is launched.
&amp;nbsp;Tip Use the _vp_edit.bat or _vp_play.bat to open the table easier
Provided you have the controller setup and have built the godot project this will play.</description></item><item><title>Mode - MyMode</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/mymode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/mymode/</guid><description>In the modes directory you&amp;rsquo;ll find MyMode.cs. This is a P-ROC mode script using the base PinGodProcMode, it doesn&amp;rsquo;t use a scene but access the game controller.
P-ROC Mode Start / Stop When this mode starts it uses the Trough to launch a ball in play.
P-ROC Switch Handlers switch Description start adds more players if ball=1 , credits and players &amp;lt; 4 slingL add 100 points slingR add 100 points inlaneL add 100 points inlaneR add 100 points outlaneL add 100 points outlaneR add 100 points saucer when active for 1 second it will add 250 then eject the ball bumperHit All bumpers call this for 150 points targetHit All targets tagged with targetBank add 200 points</description></item><item><title>Using Switches C#</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingswitches/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingswitches/</guid><description>Using in game scene c# scripts Connect to the Machines SwitchCommand. Only needs to be done once in _EnterTree or _Ready.
public override void _Ready() { base._Ready(); if (HasNode(&amp;quot;/root/PinGodGame&amp;quot;)) { pinGod = GetNode(&amp;quot;/root/PinGodGame&amp;quot;) as IPinGodGame; //use the switch command on machine through the game as we're in a game pinGod.MachineNode.SwitchCommand += OnSwitchCommandHandler; } else { Logger.WarningRich(nameof(BaseMode), &amp;quot;[color=red]&amp;quot;, &amp;quot;: no PinGodGame found&amp;quot;, &amp;quot;[/color]&amp;quot;); } } Create handler.
/// &amp;lt;summary&amp;gt; /// Switch handlers for lanes and slingshots /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;index&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; /// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;&amp;lt;/param&amp;gt; private void OnSwitchCommandHandler(string name, byte index, byte value) { if (value &amp;lt;= 0) return; switch (name) { case &amp;quot;outlaneL&amp;quot;: case &amp;quot;outlaneR&amp;quot;: game.</description></item><item><title>BasicGame - Visual Pinball Script</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp-script/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-vp-script/</guid><description>BasicGame-PinGod.vbs A script with the same name is included with the table. This will be used with the visual pinball script editor.
This can make it easier to edit outside of table, keep track of changes etc. At the top of this image it shows MODIFYING EXTERNAL.
PinGod.VP.Controller The first section marked in red is the PinGod.VP.Controller initialization.
Game Project Location When debugging, if the games Godot project is relative to the table (the same as this repo), then you won&amp;rsquo;t have to adjust the script for the GameDirectory.</description></item><item><title>Simulator - Switch Window</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-window/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-window/</guid><description>In the autoload/Machine.tscn enable a switch window.
Here you can push switches in a separate window to the game, which is better than key presses, especially when it comes to the trough.
Can create and edit your own, more help here:
ðŸ”— Switch Window - Playfield Control</description></item><item><title>Simulator - Visual Pinball</title><link>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-vp/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodnetproc/simulator-vp/</guid><description>There is a demo table provided in the visual_pinball directory.
ðŸ”— Visual Pinball 10 - Releases
Script is almost identical to the PinGodGame.
To run this with Visual Pinball you just need a COM controller setup and scripts for visual pinball then the game can be launched from the .bat files or manually.
ðŸ”— pingod-controller-com - Releases</description></item><item><title>Assets - Video</title><link>https://FlippingFlips.github.io/pingod-addons/game-assets/video/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/game-assets/video/</guid><description>Notes and reminders on some assets and modes.
Video format .Webm is buggy windows? and have had better results with .ogv.
FFMPEG: Converting video examples Using FFMPEG when converting from mp4 this file will be twice the size of the mp4 (6)
ffmpeg -i input.mp4 -c:v libtheora -qscale:v 6 -c:a libvorbis -qscale:a 6 outputname.ogv
Take 10 seconds of video starting at 12 seconds * This lower quality (3) will produce about the same size as the mp4*</description></item><item><title>BallStackPinball (Timer)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/ballstackpinball/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/ballstackpinball/</guid><description>Basic way to use a Timer as a Saucer or Kicker, the scene using this control should connect to the switch signals sent from them. See BasicGame
Tool: BallStackPinball derives from a Timer and can be used in scenes and adding them from filtering in the Godot editor.
Exports Coil = coil sname to pulse Switch = switch name that activates One Shot = true Autostart = false
Godot - Overrides BALL_SAVE_SCENE = &amp;ldquo;res://addons/PinGodGame/Modes/ballsave/BallSave.</description></item><item><title>BasicGame - Exporting</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-exporting/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-exporting/</guid><description>You can export the game to be used without the Godot editor. The Build folder will be used to export to.
Godot Export file does? _godot_export_full.bat Exports Windows Desktop which is executable and main pack _godot_export_pck.bat Exports Windows Desktop Pack which updates the main pack. The executable will be the same for all games as it basically is Godot You only need to run _godot_export_full.</description></item><item><title>BlinkingLabel (Label)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/blinkinglabel/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/blinkinglabel/</guid><description>A label that blinks on a timer with optional methods for controlling the blink</description></item><item><title>Exporting</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/exports/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/exports/</guid><description>Also See BasicGame - Simulator Export
Exporting Game Command line Use the bat files export for steps. See Godot Export You only need to build the full export once. The executable will always be the same size, but the pack file will be different. Pack executable size Shrink the executable 40 &amp;gt; 10mb with the _build_upx_shrink_executable.bat in the Build folder.
You will need UPX Ultimate Packer for eXecutables</description></item><item><title>Language files</title><link>https://FlippingFlips.github.io/pingod-addons/languages/lang-files/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/languages/lang-files/</guid><description>Add translations for the game. There are also defaults to cover most standard pinball messages in addons\assets\Localization
The default example covers English and French in pindog_default_lang.csv.
ReImport If the text doesn&amp;rsquo;t update when you run the game:
Find the CSV in Godot file explorer from addons\assets\Localization/pingod_default_lang.csv. Select the file, then look in the Import tab (next to scene top left) Click Reimport making sure it&amp;rsquo;s set as .</description></item><item><title>PinballLanesNode (PinGodGameMode:Node)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/pinballlanesnode/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/pinballlanesnode/</guid><description>Set the exports in the scene from Godot or tscn. and other options.</description></item><item><title>PinballTargetsBank (Node)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/pinballtargetsbank/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/pinballtargetsbank/</guid><description>Handles a bank of targets, the light states and watches for completion</description></item><item><title>Using Switches (Controller)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingswitchescontroller/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingswitchescontroller/</guid><description>Auto Switch handlers (No scripting) In the BasicGame, Visual Pinball table switches are added to a simulator collection named AllSwitches.
Add the switch number to the TimerInterval box in the Misc settings to 20 and add the switch to the AllSwitches collection.
All VP table objects should be covered, so you wouldn&amp;rsquo;t have to remember to use Spin instead of Hit for a spinner in the collection. (Scripting) Visual Pinball - Switch On / Off Sub sw_plunger_lane_hit() : Controller.</description></item><item><title>VideoPlayerPinball (VideoPlayer)</title><link>https://FlippingFlips.github.io/pingod-addons/tools/videoplayerpinball/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/tools/videoplayerpinball/</guid><description>VideoPlayerPinball (AddOn) This helper node for video has options to set looping and other in the inspector when added to the tree.
Tool: This can be added with Create New Node and searching in godot editor for control VideoPlayerPinball
Adding VideoPlayerPinball to Attract Mode 1. Using a duplicated BasicGame as starter project Open project with Godot Find the Attract.tscn in the addons res://addons/Modes/attract, right click and duplicate and give it a name, CustomAttract.</description></item><item><title>BasicGame - Assets and Pcks</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-assets-and-packs/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-game-assets-and-packs/</guid><description>You may want to make a base asset pack to copy and load across multiple games or ship game with separate packs for easier updating.
See Link separate assets project on how to make from linking.
Your assets will keep the same file structure, so to reach one of your assets in script the path would be &amp;quot;res://assets/img/myimage.png.</description></item><item><title>BasicGame - Create first asset scene</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-create-asset-scene/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-create-asset-scene/</guid><description>In Godot right click assets directory and add a new folder named scenes. Right click the new scenes folder and add new scene and name it test_scene. Select the type of node to be a Sprite by using Other Node for this scenes Root Node. Save the scene Ctrl+S after it opens and the file will be created test_scene.tscn
Find an image on disk and drag it into the Godot path.</description></item><item><title>PinGodGame.cs - Script</title><link>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.cs/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/pingodgame/pingodgame.cs/</guid><description>This script is autoloaded from the scene when the display window is launched and has many methods.
Modes and other scenes can get access to this from the root tree. GetNode&amp;lt;PinGodGame&amp;gt;(&amp;quot;/root/PinGodGame&amp;quot;).
Godot - Overrides _EnterTree = Gets user cmd line args, loads data and settings, creates trough, sets up ball search and audio manager
_Ready = Game initialized. Memory map is created here if read and write is enabled.</description></item><item><title>Export Settings - Godot</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings/</guid><description>The BasicGame project below shows that the first project is Windows Desktop Runnable and is exporting to ..Build/PinGod.BasicGame.exe
This window can be found in Godot Project &amp;gt; Export.
Export option &amp;ldquo;embed pck&amp;rdquo; does not work on 32-bit x86 GodotIssues
- Feb 2020
&amp;nbsp;Godot Naming The names here have to be consistent which each other. The exe and the pack.
The BasicGame project for Windows Desktop Pack shows that it&amp;rsquo;s exporting to .</description></item><item><title>Export - export_presets.cfg</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings-export-presets.cfg/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-settings-export-presets.cfg/</guid><description>The file for the previous Godot Export Settings.
Icons, names, exported saves.
Export Presets Create export presets by duplicating a section, changing the preset number.
Add or change the pack names by hand here, export_paths, folders to exclude or just include
The following example is from the BasicGamePck where we are just creating with all resources apart from the audio folder.
[preset.0] name=&amp;quot;GfxPack&amp;quot; platform=&amp;quot;Windows Desktop&amp;quot; runnable=false custom_features=&amp;quot;&amp;quot; export_filter=&amp;quot;all_resources&amp;quot; include_filter=&amp;quot;&amp;quot; exclude_filter=&amp;quot;assets/audio/*&amp;quot; export_path=&amp;quot;.</description></item><item><title>Export Windows Icons</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/export-windows-icon/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/export-windows-icon/</guid><description>If you need to change the icon
Make icon with all size in one file Download RCEdit (Github) and add the path in Godots Editor Settings\RCedit Change icon in the Godots Project Settings/Application/Config See https://docs.godotengine.org/en/3.2/getting_started/workflow/export/changing_application_icon_for_windows.html</description></item><item><title>C# Pcks Are Large...</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/csharp-large-exports/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/csharp-large-exports/</guid><description>This doesn&amp;rsquo;t apply if you decide to have a single executable and pck, so you can skip this
Note: This could have changed in Godot 4, untested
When a project uses mono C# it includes mono assembilies which are around 29mb.
If you try to export the assets only from this project, then you will always have the c# files.
One workaround method is to use the BasicGamePck/project.</description></item><item><title>Link assets into separate assets project</title><link>https://FlippingFlips.github.io/pingod-addons/exporting/link-separate-assets-project/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/exporting/link-separate-assets-project/</guid><description>We can reuse the assets and .import directories from BasicGameGodot into the BasicGamePck project.
Use the BasicGamePck project just for exporting assets, scenes, no C# scripts.
Link assets Remove the assets directory if there is one in BasicGamePck
This can be done with _link_assets.bat helper bat file.
Symbolic link the BasicGameGodot\assets directory into the BasicGamePck directory.
Symbolic link the BasicGameGodot\.import directory into the BasicGamePck directory.</description></item><item><title>Using Coils (C#)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingcoils/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingcoils/</guid><description>Coils can be On, Off or Pulsed. Get a reference to /root/Machine from a scene.
var pingodMachine = GetNode&amp;lt;MachineNode&amp;gt;(&amp;quot;/root/Machine&amp;quot;); pingodMachine.CoilPulse(&amp;quot;trough&amp;quot;, 225);</description></item><item><title>Using Coils (Controller)</title><link>https://FlippingFlips.github.io/pingod-addons/machine/usingcoilscontroller/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/usingcoilscontroller/</guid><description>Visual Pinball SolCallbacks When Visual Pinball detects changed coils the callbacks are invoked by coil number.
The script example to handle coil 35 would be SolCallback(35) = &amp;quot;Lampshow2&amp;quot;. This will invoke the LampShow2 sub routine (if you have one)
SolCallback(1) = &amp;quot;bsTrough.solOut&amp;quot; ' The trough which makes the ball pop out.... SolCallback(2) = &amp;quot;FlippersEnabled&amp;quot; ' Enable and disable flippers, when ball drains, tilt etc Some standard callbacks for default game</description></item><item><title>BasicGame - Script Editing Setup</title><link>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-script-editing/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/getting-started/basicgame-script-editing/</guid><description>Script editing / Editing .tscn files outside of Godot editor It&amp;rsquo;s not great to use the Godot editor for editing C# scripts. We prefer to use Visual Studio, but with any text editor you can build changes made in Godot.
Visual Studio Bigger install, full ide, code completion
Visual Studio Code Smaller, quicker to load a project directory, code completion, has a terminal.
Sublime Text Smaller text editing, this is good for using saved directories and viewing the contents of the games app_data and logs.</description></item><item><title>Recording / Playback</title><link>https://FlippingFlips.github.io/pingod-addons/machine/recordings-playback/</link><pubDate>Mon, 26 Dec 2022 15:26:15 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/machine/recordings-playback/</guid><description>Quick guide on how to record and playback a game.
Recording a game can speed up your game development for game logic.
They would usually start off by using trough switches then adding credits and starting a game.
Any events after this to test any recorded sequence like clearing a target bank, draining your ball.
Testing modes and testing the complete game.
Recording Recording files are saved in the user://recordings/recordname.record</description></item><item><title>About PinGod</title><link>https://FlippingFlips.github.io/pingod-addons/about/</link><pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate><guid>https://FlippingFlips.github.io/pingod-addons/about/</guid><description>Pinball game framework</description></item></channel></rss>